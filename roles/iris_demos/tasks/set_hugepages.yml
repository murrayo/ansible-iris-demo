---
- name: Set hugepages
  ansible.builtin.debug:
    msg: "Set hugepages to {{ hugepages }}"

# set huge pages, separate commands for different OS as an example

# Display the current hugepages values

- name: Get hugepages value
  ansible.builtin.command: sysctl -n vm.nr_hugepages
  register: hugepages_value
  changed_when: hugepages_value.rc != 0
  when: ansible_distribution in ["RedHat", "Ubuntu"] and ansible_distribution_major_version in ["9", "22"]

- name: Display hugepages value
  ansible.builtin.debug:
    msg: "Current hugepages value: {{ hugepages_value.stdout }}"
  when: ansible_distribution in ["RedHat", "Ubuntu"] and ansible_distribution_major_version in ["9", "22"]

# Set hugepages

- name: Set huge pages
  ansible.posix.sysctl:
    name: vm.nr_hugepages
    value: '{{ hugepages }}'
    state: present
    reload: true

# Display the current hugepages values

- name: Get hugepages value
  ansible.builtin.command: sysctl -n vm.nr_hugepages
  register: hugepages_value
  changed_when: hugepages_value.rc != 0
  when: ansible_distribution in ["RedHat", "Ubuntu"] and ansible_distribution_major_version in ["9", "22"]

# Was it a success

- name: Compare hugepages and fail if they are not equal
  ansible.builtin.assert:
    that: hugepages == hugepages_value.stdout
    msg:
      - "hugepages {{ hugepages }} expected, actual value is {{ hugepages_value.stdout }}."
      - "Possible memory fragmentation. Reboot required."
  ignore_errors: true # Fail but do not fail the playbook, set to false to stop here
  register: ignore_errors_register # <- Stores errors and failures for evaluation.

# - name: Fail the play if variables were not equal
#  ansible.builtin.fail:
#    msg: "Failed play. Restart required. Could restart here or set a flag that restart is required"
#  when: hugepages != hugepages_value.stdout

# Restart server - Example - probably would wait till other changes made

- name: Reboot the server
  ansible.builtin.reboot:
    reboot_timeout: 3600
  when: hugepages != hugepages_value.stdout

# Wait for server to come back
- name: Wait for server to come back online {{ ansible_hostname }}
  ansible.builtin.wait_for:
    port: 22
    state: started
    host: '{{ ansible_hostname }}'
    delay: 30
  with_items: "{{ inventory_hostname }}"
  when: hugepages != hugepages_value.stdout
